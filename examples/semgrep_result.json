{"errors": [], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["Dockerfile", "cardbrands/cardbrands.go", "cmd/acs.go", "cmd/direct.go", "cmd/root.go", "config/config.go", "cybersource_acs/configuration/service.go", "cybersource_acs/payment/backend_state.go", "cybersource_acs/payment/capture.go", "cybersource_acs/payment/enroll.go", "cybersource_acs/payment/process.go", "cybersource_acs/payment/reverse.go", "cybersource_acs/payment/service.go", "cybersource_acs/payment/validate.go", "cybersource_acs/preauth/cleanup.go", "cybersource_acs/preauth/payload.go", "cybersource_acs/preauth/process.go", "cybersource_acs/preauth/service.go", "cybersource_acs/refund/refund.go", "cybersource_acs/refund/service.go", "cybersource_acs/refund/void.go", "cybersource_acs/server.go", "cybersource_direct/configuration/service.go", "cybersource_direct/payment/backend_state.go", "cybersource_direct/payment/capture.go", "cybersource_direct/payment/enroll.go", "cybersource_direct/payment/process.go", "cybersource_direct/payment/reverse.go", "cybersource_direct/payment/service.go", "cybersource_direct/preauth/cleanup.go", "cybersource_direct/preauth/payload.go", "cybersource_direct/preauth/process.go", "cybersource_direct/preauth/service.go", "cybersource_direct/refund/refund.go", "cybersource_direct/refund/service.go", "cybersource_direct/refund/void.go", "cybersource_direct/server.go", "errors/errors.go", "failurecodes/failurecodes.go", "gateway/client.go", "gateway/request.go", "gateway/response.go", "internal/async/async.go", "main.go", "middleware/datadog.go", "middleware/dump.go", "middleware/logger/logger.go", "middleware/logrus.go", "middleware/recovery/recovery.go", "mock/mock.go", "proto/backend.pb.go", "proto/errors.pb.go", "soap/client/client.go", "soap/request/cybersource.go", "soap/request/request.go", "soap/response/cybersource.go", "soap/response/refund_response.go", "soap/response/response.go", "stringutil/stringutil.go", "testdata/testdata.go"]}, "results": [{"check_id": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "end": {"col": 3, "line": 87, "offset": 2451}, "extra": {"fingerprint": "c07ab1c11bcfbf6b13b37fd90bda80c4c9cb2eb18072a2e88d41cc54ae02ea70de5ed48fbc29c251b2de0f6aadbff143f52865a886cf3dbf5b1df68a65ef8b56_0", "is_ignored": false, "lines": "\tserver := grpc.NewServer(\n\t\tgrpc.StreamInterceptor(si),\n\t\tgrpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(\n\t\t\tui,\n\t\t\t// recover from panics\n\t\t\tgrpc_recovery.UnaryServerInterceptor(grpc_recovery.WithRecoveryHandler(recovery.HandlerFunc)),\n\t\t\t// logger interceptor\n\t\t\tgrpc_logrus.UnaryServerInterceptor(logger.NewEntry(), grpc_logrus.WithLevels(logger.CodeToLevel)),\n\t\t)),\n\t)", "message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-300: Channel Accessible by Non-Endpoint"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption"], "shortlink": "https://sg.run/5Q5l", "source": "https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "subcategory": ["audit"], "technology": ["grpc"]}, "metavars": {}, "severity": "ERROR"}, "path": "cybersource_acs/server.go", "start": {"col": 12, "line": 78, "offset": 2081}}, {"check_id": "go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "end": {"col": 3, "line": 87, "offset": 2466}, "extra": {"fingerprint": "31316c62bcba4a07b7c052abb31b38cb62c14e7ca5bb2b04328685950dfaf4ec35350cc38b5c003802e584c1a119198b637231ea989212b2f6a67122286f8d56_0", "is_ignored": false, "lines": "\tserver := grpc.NewServer(\n\t\tgrpc.StreamInterceptor(si),\n\t\tgrpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(\n\t\t\tui,\n\t\t\t// recover from panics\n\t\t\tgrpc_recovery.UnaryServerInterceptor(grpc_recovery.WithRecoveryHandler(recovery.HandlerFunc)),\n\t\t\t// logger interceptor\n\t\t\tgrpc_logrus.UnaryServerInterceptor(logger.NewEntry(), grpc_logrus.WithLevels(logger.CodeToLevel)),\n\t\t)),\n\t)", "message": "Found an insecure gRPC server without 'grpc.Creds()' or options with credentials. This allows for a connection without encryption to this server. A malicious attacker could tamper with the gRPC message, which could compromise the machine. Include credentials derived from an SSL certificate in order to create a secure gRPC connection. You can create credentials using 'credentials.NewServerTLSFromFile(\"cert.pem\", \"cert.key\")'.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-300: Channel Accessible by Non-Endpoint"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2021 - Identification and Authentication Failures"], "references": ["https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption"], "shortlink": "https://sg.run/5Q5l", "source": "https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection", "subcategory": ["audit"], "technology": ["grpc"]}, "metavars": {}, "severity": "ERROR"}, "path": "cybersource_direct/server.go", "start": {"col": 12, "line": 78, "offset": 2096}}], "version": "0.116.0"}